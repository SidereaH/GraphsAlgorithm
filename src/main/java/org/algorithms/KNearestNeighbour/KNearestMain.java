package org.algorithms.KNearestNeighbour;

import java.util.Hashtable;

public class KNearestMain {
    public static void main(String[] args) {
        System.out.println("1. Задача классификации цветков ириса");
        Hashtable<String, double[]> iris = new Hashtable<>();

        //1. Задача классификации цветков ириса: дан набор данных с
        // измерениями длины
        // ширины чашелистиков лепестков ирисов,
        // а также их классификация на виды.
        // Необходимо реализовать алгоритм k ближайших соседей для предсказания класса неизвестного ириса на основе его измерений.

//        Iris setosa 1:
//        Длина чашелистика (см): 5.1, 4.9, 4.7, 4.6, 5.0, ...
//        Ширина чашелистика (см): 3.5, 3.0, 3.2, 3.1, 3.6, ...
//        Длина лепестка (см): 1.4, 1.4, 1.3, 1.5, 1.4, ...
//        Ширина лепестка (см): 0.2, 0.2, 0.2, 0.2, 0.2, ...
//        Iris versicolor 2:
//        Длина чашелистика (см): 7.0, 6.4, 6.9, 5.5, 6.5, ...
//        Ширина чашелистика (см): 3.2, 3.2, 3.1, 2.3, 2.8, ...
//        Длина лепестка (см): 4.7, 4.5, 4.9, 4.0, 4.6, ...
//        Ширина лепестка (см): 1.4, 1.5, 1.5, 1.3, 1.5, ...
//        Iris virginica 3:
//        Длина чашелистика (см): 6.3, 5.8, 7.1, 6.3, 6.5, ...
//        Ширина чашелистика (см): 3.3, 2.7, 3.0, 2.9, 3.0, ...
//        Длина лепестка (см): 6.0, 5.1, 5.9, 5.6, 5.8, ...
//        Ширина лепестка (см): 2.5, 1.9, 2.1, 1.8, 2.2, ...

          double[] params = new double[] {5, 3, 2, 4};
          iris.put("flower", params);
          KNearest newIris = new KNearest(iris, "flower");
          newIris.searchNearest();
          System.out.println(newIris);
        System.out.println("2. Задача рекомендации фильмов ");
        //2. Задача рекомендации фильмов: дан набор данных с оценками пользователей для различных фильмов.
        // Необходимо реализовать алгоритм k ближайших соседей для предсказания оценки, которую пользователь поставит определенному фильму на основе оценок его k ближайших соседей.
        Hashtable<String, double[]> myfilms = new Hashtable<>();
        double[] paramsFilm= new double[]{2,2,5,4,3};
        myfilms.put("film", paramsFilm);
        KNearest meFilms = new KNearest(myfilms, "film");
        meFilms.searchNearest();
        System.out.println(meFilms);
        System.out.println("3. Задача прогнозирования цены на недвижимость ");
        //дан набор данных с информацией о различных параметрах недвижимости (площадь, расположение, количество комнат и т.д.) и их ценой. Необходимо реализовать алгоритм k ближайших соседей для предсказания цены неизвестного объекта недвижимости на основе аналогичных объектов из обучающего набора данных.
        Hashtable<String, double[]> flats = new Hashtable<>();
        //площадь
        //минуты до центра
        //количество комнат
        //этаж
        double[] paramsFlat = new double[]{34.6,28,1,5};
        flats.put("flat", paramsFlat);
        KNearest meFlats = new KNearest(flats, "flat");
        meFlats.searchNearest();
        System.out.println(meFlats);
    }

}
